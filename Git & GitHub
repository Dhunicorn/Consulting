Git & GitHub
===========

How is software versioning managed in your environment / Sudobarn tech

Sudobarn - software services - manage software for Dhunicorn Plc:
Develop, tet, build,qualify, backup, deploys & monitors applications

An application is the output from software development

Team of developers:
version1 .........release1   = 1500 lines of codes
echo "Welcome to Dhunicorn"

version2 ........releas2    = 2000 lines of codes
echo "You are welcome to Dhunicorn"

version23 ......release3    = 3000 lines of codes
echo "Welcome to Dhunicorn, the best international consulting firm"

How do we manage versioning:
 Rollout:   -- version1 --> version2--->version3   
 
 RollBack:  -- version3 --> version2--- 

Version in software development:
Local verson control system (LVCS), engineers (Lucas, Grace Nkeng, Dr Cho, Masong, Valy)
        does not allow for support roll and lack of collaboration
Centralised version control system (CVCS)
Distributed version control system (DVCS) - on a central server
	Git is a DVCS
	Allows developer to writee codes and commit, live on a platform

	GitHub is a source code management (SCM) too / platform

Git & GitHub
============
     Distributed Version Control system 
  - Git manages data as snapshots. 
  - It takes a picture of what all your files look like 
     at that moment and stores a reference to that snapshot.
  Benefits: 
    data intergrity - 99.9% 
    Rollout  
    RollBack 
    git easily integrate with SCM platform (e.g Github)

Team of developers
Lucas, 
Grace, 
Nkeng,
Valy
Masong

SCM Platforms
===========
Provide a centralised platform (and not seerver) by a third part guarantee (99.9% reliability and availability) 
GitHub - Microsft is vendor
BitBucket
GitLab
aws-code-commit
etc

Other DVCS
SVN = Sub Version
CVs = Concurrent version system
TFS = Team Foundation Server
Git = 95% of companies are using git

IQ: As a DevOps Engineer, what are your roles & responsilities in versioning?
Answer:

1. A DevOps Engineer is a Subject Matter Expert (SME)
	  DE should recommend best option for versioning - DVCS like Git

2. Ensure that developers' environment are configured and secured
	 Create an enabling environment for Developers

3.Onboarding new project / client
	Create a SCM account like GitHub or aws-code-commit for client where applicable
	Create organisations where applicable 
    Create repositories in SCM [GitHub] 
    Create teams in SCM and assign members[Developers, etc.]

4. Expert in Agile / DevOps / Scrum MGt & related tools
5. Ensure that Git and the IDEs are installed by the developers


Interview Question (IQ) What is your experience as a DevOps Engineer??
1. Creating aws accounts for client
2. Launching Linux servers in aws for client  
3. Connecting securely using ssh / http / terminal from remote location
4. Running workload in Linux systems like:
     fileMGT / userMGT / packageMGT / processMGT / securityMGT 
     granting access


We all have created GitHub accounts
====================================

Let's set up the Project environment for a client: Dhuncorn ---> dhunicorn.com

1. creat an account for our company in GitHub
        http://github.com/
        email: sudobarn@gmail.com
        username: Sudobarn
        password: **********
        http://github.comsudobarn/     --> default organisation

2. Create an organisation for the client (Dhunicorn) in our GitHub account
        https://github.com/Dhunicorn

3. create teams and add members. Assign roles to members
        https://github.com/Dhunicorn/Consulting.git

Assign roles to Team members -- security 
      added external collaborators 

        Provide/Grant repo access to the team
        least privileges to team members
4. request that each developer /team member installs git on local environment
5. invite them to remote team and share the details of the remoteRepo with them

Package Management
=================
Prerequisite software download / registration
Install git in Windows   :  
  1. Install git bash @ https://git-scm.com/downloads
  2. choco install git  --> on powershell as administrator

Install in RedHAT Linux servers:
    sudo yum install git  -y 

Install in mac systems: 
  1. downloads and the run file  
  2. brew install git  
-----
Install in RedHAT Linux servers:
  sudo yum install git  -y 

  you need to be root 

You need to be root to perform this command.
sudo su - root

[root@demo ~]# yum install git

[root@demo ~]$ yum install git
    sudo yum install git  
    sudo -u root yum install git

    git --version

Downloading package:
   wget / curl   
   sudo yum/apt/choco/brew/
    install git 
    /home/ec2-user/dhunicorn/consulting/.git/

Some git commands:
git init/status/add/commit/merge/rebase/branch

mkdir dhunicorn
cd dhunicorn
mkdir consulting
cd consulting
git init

Initialised empty git repository in /home/ec2-user/dhunicorn/.git/
   Git tacks changes in file/code/scripts
   Git keeps the records of the old file/code/scripts using a commit ID

For example, I am working with this document for a number of days:

Day 1 week 1

employees.txt
-------------
Julius
Vic
Usoroh


Day 3 week 1
------------
Julius
Vic
Usoroh


Day 5 week 2
------------
Julius
Vic
Usoroh
Walter

Without git, you cannot track what happened in day 1, 2, 3
However, with Git, a record of the old is kept with a commit ID

Let's write a code as developers do:
  Vim app.java
  # This code is a web application
  # Please do not hard code
  # Make use of standard and dynamic variables
  # This is my first file oooh
  # I hope to get hired and ready to go
  # Author: Sudobarn Technologies

Development: = writing codes/Software
  working-area    staging-area  localRepo  remoteRepo[GitHub] :
  dev-starts       

  app.java --->   git add      git commit   git push                      
     red            green  
 
  git add . 
  git add *    --> all files
  git add filename  

  git commit -m "my first commit"  
  git log - check all the times a code has been changed in the past    

 git commit -m "first commit"

[ec2-user@demo twitter]$ git commit -m "first commit"
Author identity unknown 
Author's identity must be known - before commit in Git
  git config --global user.email "Sudobarn@gmail.com"
  git config --global user.name "Julius"
  git config --global --list  = to verify if the right configuration has been done  
  
 When you install Git-bash, the first thing is to set up your user details as follows
#git config --global user.name 
#git config --global user.email - to see if author's identity has been confgured 

#git config –list
# git config --global –list



  Git show - what happened in any commit

What we are doing now is what we expect developers to do, but we need to know the
basics of their working

Let's creat another file:
  echo "database connection" >> db.sql

Git add .             db.sql has moved from working to staging area
git status
git comit -m "db connection created"  - best practice is to enter a good message
git log
git show 

Julius is working with other members of the team:
  Vic
  Valy
  Lucas

  They need to collaborate - push the code to the remote repo in GitHub

https://github.com/Dhunicorn/Consulting.git

git remote add aliasName repoURL  
git remote add success https://github.com/ndanyih/webapp
   or
git remote add sucess https://github.com/ndanyih/webapp

git remote -v   -> to see if there is any remoteRepo addeed

[ec2-user@demo consulting]$ git remote -v
success https://github.com/Dhunicorn/Consulting.git (fetch)
success https://github.com/Dhunicorn/Consulting.git (push)

[ec2-user@demo consulting]$ git push https://github.com/Dhunicorn/Consulting.git master
[ec2-user@demo consulting]$ git push tt master

Public Repos / 
   READ / 
   write 
  https://github.com/Dhunicorn/Consulting.git

Private
   Only members of your team can have read / write access, if you grant them  

[ec2-user@demo twitter]$ git push tt master
Username for 'https://github.com': sudobarn
password/token : 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

remote: Support for password authentication was removed on August 13, 2021.
fatal: Authentication failed for 'https://github.com/Dhunicorn/Consulting.git'

We are going to use a token (PAT) instead of a password:  
PAT - personal access token
We wiil go to our GitHub account and create a token, called PAT
      click on settings
      Search for developer settings
      choose personal access token, and tokens (classic)
      Generate new personal access token, and new token
      Enter note
      Generate token
      Copy token immediately: 
        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

[ec2-user@ip-172-31-24-157 consulting]$ git push success master
Username for 'https://github.com': sudobarn
Password for 'https://sudobarn@github.com':
Enumerating objects: 6, done.
Counting objects: 100% (6/6), done.
Compressing objects: 100% (4/4), done.
Writing objects: 100% (6/6), 650 bytes | 650.00 KiB/s, done.
Total 6 (delta 0), reused 0 (delta 0), pack-reused 0
To https://github.com/Dhunicorn/Consulting.git
 * [new branch]      master -> master


Recap - What we have been able to do:
git remote add AliasName repoName  
git remote add mom  mother's names
git remote add dad  father's names    

   mom/dad/dady/mummy/bae/babe  

git push  -- moves code from localRepo
             to Remote-Repo in SCM [GitHub/GitLab, ETC]

git push AliasName branchName     
git push vs master 
 working area        staging     localRepo     RemoteRepo[GitHub]    :
  -----------        -------      ---------     ------------------  
  Untracked files     git add     git commit    git push 
    red                green     

   See files in both environments
   git status
   change content in local eenviron 
      vim db.sql
      # Making some changes

    git status

 vim deploy.java

      Let's commit changes
      git add .
      git status
      git commit -m "changes"   
      git status

Once you commit, you have to push to the remoteRepo for others to collaborate with
      git pus tt masster

      We have synchronised (in sync) our local with remote environ. to ease collabo

We can edit a file directly on GitHub, and clicked on Commit changes to the master branchName

check no of commits with git log
VERIFY:
  git remote -v 

git pull tt master --> to sync the changes in remote with local repository
git show --> to understand the changes
                +# This is a fe (front end) application

git fetch / clone                           <-------------------
git merge    
git pull <------------------------------------------------------
 
git init          = to initialised a git empty repository
git status        = to track files location [WA/SA/localRepo/RemoteRepo]
git log           = list all commits  
git add           = move files to staging area from working area
git commit -m     = move files to the local repository FROM STAGING AREA
                    good commit message for tracking changes/authors 

git show  = Shows changes that occurred in a commit  
git add tt https://github.com/LandmakTechnology/consulting
git push tt master  = moves changes in codes to the remoteRepo   
git pull tt master 
  What is branch  = a git branch is a line of development

     https://github.com/LandmakTechnology/consulting

git commit -m "users list created"
git push RemoteRepo master              


 git fetch --> It brings changes in the code to the LocalRepo
  git pull --> It brings changes in the code to the Working area 
  git clone --> It brings the entire code to the working area 

    use to merge changes on the RemoteRepo with the localRepo

git remote -v 
git push ta master 
 
 git pull ta master
 git fetch ta master

ec2-user
   app.py  
   git pull    


  vi app.py and modifies this file    

git diff ta/master 

git merge  ta/master 

 ta/master
===============
IDEs – Integrated Development Environment  : 
    Eclipse  -  open source Java BASED IDE
    MyEclipse - not
    NetBeans  OS Heavy
    Intellij - not
     Front – End 
            VS Code
            Atom 
   
     .classpath
    .project
    node_modules

what is .gitignore file use for??
  This records files and dirs that shouldn.t be tracked by git  
touch .classpath .project  && mkdir node_modules  
Does this also work for any other file that we don't want git to track? YES. 

git commit -m ".gitignore file created"

================= 
Which Atlassian tools have you used in your project?  :
---------------------------------------------------
    BitBucket  ---> scm          = GitHub
    Bamboo --> CI/CD             = Jenkins 
    Jira -->  Ticketing tool =
    Confluence  --> Documentation  
----> 

Homework: Go on Youtube, find videos to study and practice Jira
========= 

IQ: How many branches are you supporting in your projects?
    Branches are used to create lines of development. 
    A branch is a line development 
  We maintain a minimun of 3 branches:
        development branch  
           app.java     
        staging branch  
           app.java
        master branch  
           app.java

  git branch  = list all the branches [lines of development]
  git branch branchName  = create a new branch     
  git checkout branchName = switch branches 

git commit -a -m "dev env deployment"
git commit -a -m "master deployment"
 
  git merge dev -m "merging" 
  CONFLICT 
dev
   dc1-->dc2  
master 
   mc1---mc2  
  git merge = CONFLICT will occur 
              resolve manually [vi into the affected files ]
             
dev
   dc1-->dc2  
master 
   git diff and git merge   
   mc1---mc2 

IQ: How many environments are you supporting in your projects?
Environment:
    development branch deploying to Development ENV 
    testing branch deploys to  Testing ENV
    testing branch deploys to  UAT(QA, BA)   ENV
    MASTER branch code are deployed to  Production
 
  Branches are used to create lines of development. 
  A branch is a line development 

    td 

  development branch 
git diff development --> shows differences 

   git merge --> merges differences

   git merge development -m "Changes Reviewed ok"

   git commit -a -m "readme ready for testing"

   git merge development -m "Ready"

   git commit -a -m "merging issues fixed"

   git push origin --all 
   git push origin master 
   git push origin stage 
   git push origin development

  
stage branch:
  sc1-->sc2-->sc3-->sc4 

master branch:
  we need to compare, review and merge the changes in one branch
  to another use:  
  git diff  branchName 
  git merge
     sc1-->sc2-->sc3-->sc4  = mc1  
  git rebase 
     sc1-->sc2-->sc3-->sc4
          = mc1-->mc2--->mc3-->mc4   
  git cherry-pick  c-ID 
  git cherry-pick 5aae370cb
  git cherry-pick  03f5ade9
    
    03f5ade9
    a76e954
    5b470d2
    
git r

git branch development 
git branch stage  
git branch -d dev

origin is the default AliasName created by git   
git push ta --all 
   git push ta --all 
   git push ta master 
   git push ta stage 
   git push ta development

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
Tesla:

Using Jira -- ticket 145 is created to remove bugs    
Tesla:
  ec2-user  
  Sudobarn
    ---> git clone https://github.com/Dhunicorn/Consulting        

 create a bug_fix branch
 git branch bug_fix_Sudobarn_145 

Tesla:  
  add a new feature to Tesla-phone application 
 Using Jira -- ticket 155 is created to add new features    

 new branch:  feature_Sudobarn_155  


 pull Requests  
 merging    

tag:
What is the difference between Git & Github:
Git is an open source Distributed Version Control System(DVCS) which records
changes made to files (codes) laying emphasis on speed, data integrity in a
distributed non-linear workflows.  

SCM:
Github is a hosted  repo (UI)  for git or an open source SCM tools  
gitLab 
bitBucket
codeCommit
git log  :
 Head is a pointer that points to the current branch and latest commit.  


git tag 
====
difference b/w tags and branches :
=== Tags                     ==Branch
immutable                    mutable
unmodifiable                 modifiable
After Production             development-WIP 
Master Recommended           any branch 


git tag TagName                 git branch BN
git push an --tags              git push an --all           
git push AliasName tag TN       git push an BM              
git tag -d TN                   git branch -d BN


Explain your branching strategy in LandmakTechnology ?? 
Explain your branching strategy in Valy systems ?? 

VIDEO:
  ROLL-BACK using 
     git clean   
     git revert  
     git reset   
  how to manage multiple tasks and wip via :
      git stash  
  how to connect to git using ssh-keys  

  git best practices  :
  git branching strategy and security:
    Developers should not/can't
     commit code directly to the master or main branch  

.gitignore file/dirs:
    records files that are not part of the code/software and    
    should not tracked by git 

=================================================
git 4 Running notes  
======================


make sure that your working tree is clean 

Conflict = dev / stage / masteZZr  

git stash       =     to take backup
git stash  list

  commit 

stash@{0}
stash@{1}

git stash apply            = resume wip for the most recent backup
git stash apply stash@{0}  = resume wip for the 1st backup
git stash apply stash@{5}  = resume wip for 6th backup
git stash drop stash@{0}   = will delete backup
git stash pop stash@{1}    =It apply & drop backup 1.
git stash pop
# git 

git merge stage  = all changes

git cherry-pick 0aa9b586ed   #
  It is use choose a specific commit from one 
  branch and  apply it onto another

stage --> dc1 --> dc2 --> dc10
   
master
  git merge stage 
  git cherry-pick
  git rebase 
  git branch uat
  git checkout uat  
  git checkout -b bugfix 


https://github.com/Dhunicorn/Consulting

git clone
    push
    pull -- move changes from RemoteRepo to working area
    fetch -- move changes from RemoteRepo to LocalRepo
             git merge - to move from localRepo to wa 


developer Sam

git push origin master

Manage access

git fetch

IQ: when should I used fetch, clone and pull ?

git clone https://github.com/mySudobarn-Technology/td

  dev1---dev10 


  Username
  Password  

git remote add ba https://github.com/Dhunicorn/Consulting
git remote add bas git@github.com:mySudobarn-Technology/ba.git

SSH-KEYS: 

  ssh-private-key (.pem)

ssh-keygen 

ls ~/.ssh/
cat ~/.ssh/id_rsa.pub 

rm -rf ~/.ssh 

ssh -T git@github.com

ssh-keygen 
ssh-keygen -t dsa
ls -la ~/.ssh  
    id_rsa         private
    id_rsa.pub     public
    known_hosts    hosts validated credentials
    
ssh uses RSA encryption  algorithm by default.

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

   

PAT
   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
    It is used to access and/or manage the GitHub-API resources
    Use to control access 
    use to access GitHub account instead of password
We can generate multiple PAT with different level of access    

git commit --amend -m "an updated commit message" : 
   Change most recent Git commit message.

git log --author="ec2-user Legah"

IQ: What is the difference b/w git commit and git rebase

GIT = DVCS 
          V1      V2
master -->mc1 -->mc2-->
                      |
                      |              v3    v4    v5 = 3
                      > development dc1-->dc2-->dc3

git merge master:# dc1-->dc2-->dc3 = dc1 (v6)
                   v1 + v2 + v6

git rebase : dc1-->dc2-->dc3

Best Branching Strategy:
    development

    stage

    master -  
        bugfix_bugName
        feature
There's no specifc strategy

hookGithub-webhook

Git Best Practices:
    Use branching strategy and pull requests
    Commit once you finish the task. 
    Avoid merge Conflicts.
    Don’t Commit Half-Done - git stash
    Test your code before commit.
    Write Good Commit Messages before committing 
    Try to use git commands rather than GUI tools.
    use ssh url and PAT over https 
    use rebase over git merge

===================================================== 
https://github.com/Sudobarntech/mastercard  = private   
https://github.com/Sudobarntech/visa        = public
https://mySudobarntech.com/
https://www.bankofamerica.com/smallbusiness/
https://mySudobarntech.com/join  ---> google from for Registration
      GET | PUT | DELETE | POST  
HTTP Status Codes:
1000 = 1×× Informational
    100 Continue
    101 Switching Protocols
    102 Processing
200 = 2×× Success
    200 OK
    201 Created
    202 Accepted
3×× Redirection
    300 Multiple Choices
    301 Moved Permanently
    302 Found
    303 See Other
400=4×× Client site Error
    400 Bad Request
    401 Unauthorized
    402 Payment Required
    403 Forbidden
    404 Not Found
    405 Method Not Allowed
    406 Not Acceptable

500=5×× Server site Error
    500 Internal Server Error
    501 Not Implemented
    502 Bad Gateway
    503 Service Unavailable
    504 Gateway Timeout

https://httpstatuses.com/  
  
  
Manage access

abe4c5c017fc1520eb4beabd5b7fc633317cd085

ROLES: 
    DevOps Engineer 
    Cloud Engineer
    Platform Engineer
    SRE
    CKA || SCM 
    AWS Solution Architect || 
    Cloud Engineer | | BSc. ||
    Linux - REDHAT,  UBUNTU, CENTOS

LANDGUAGES:
   •  Bash Shell, Powershell, 
        yaml, Json, Golang and Groovy.  
  AWS 


Git Summary:
===========
 Git is a distributed version control system.
   We use git for Versioning in our projects.      
 Git keeps/records changes made in codes/files/scripts

 Basic concepts:
  1. git installation   
       yum install git  [for RedHAT/centos]  
       apt install git  [for ubuntu and debain ]
       
       download the microsoft installer file for git 
          Git-3.39.2.2-64-bit.exe   
          git bash  
  
  2. git commands
      - git [init/add/commit -m/status/  ] 
      - git pull/fetch/clone/  
  
  3. git branch  = a branch is a line of development   
     - git branches: 
          dev stage master 
     - git branch branchName  
     - git branch -d branchName 
       git switch branchName or git checkout branchName
       git checkout -b branchName  

  4. git tag   
  5. git merge  
  6. pull requests = PR     
Valy/
Vic  
ec2-user:
   https://github.com/Sudobarntech/visa
Valy:
  git fetch/pull/clone   
  git clone https://github.com/Sudobarntech/visa  
  git config --global user.name "Valy"
  git config --global user.email "Valy@gmail.com"
  git config --global --list  

1. Coding is done by Developers using programming LANDGUAGES
   java, python, c++, JS, NodeJS, Groovy   

2. DevOps Engineers work with Developers  

2. DevOps Engineers write and modify scripts.
   scripting LANDGUAGES: 
       bash shell scripts / 
       python scripts
       groovy scripts(Jenkinsfiles)  
       yaml (Kubernetes and ansible) 
       terraform codes    
   The use SCM [GitHub, GitLab, etc.] to record changes in scripts

 https://github.com/LandmakTechnology/scripting

ACHIEVING ZERO DOWNTIME AND SUCCEEDING:
   1.  Attend all live your classes 
        and follow videos shared on time.    
   2A. Revise videos and notes before the next class 
   2.  Consistently dedicated 3+ hours for daily studies
   3.  Raise ticket of issues and share in the forums or witj class reps and instructors.
   4.  Be quick to help others reslove issues/tickets - 

=====











 










